buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.javassist:javassist:3.18.1-GA'
    }
}


import java.util.zip.ZipFile
import javassist.*

void eachClass(File file, Closure closure) {
    if (file.isDirectory()) {
        // it is a classpath directory
        file.eachFileRecurse {
            String path = it.absolutePath
            def matcher = (path =~ /(.*)\.class/)
            if (it.isFile() && matcher.matches()) {
                String className = matcher.group(1)
                        .substring(file.absolutePath.length() + 1)
                        .replaceAll('/', '.')
                        .replaceAll('\\\\', '.')
                closure className
            }
        }
    } else {
        // it is a JAR file
        new ZipFile(file).entries().each {
            def matcher = (it.name =~ /(.*)\.class/)
            if (!it.isDirectory() && matcher.matches()) {
                String className = matcher.group(1).replaceAll('/', '.')
                closure className
            }
        }
    }
}

boolean findSuperclass(CtClass aClass, CtClass superClass) {
    while (!aClass.equals(superClass)) {
        if (aClass.superclass == null) {
            return false
        } else {
            aClass = aClass.superclass
        }
    }
    return true
}

CtMethod findMethod(CtClass aClass, String methodName, CtClass[] parameters) {
    while (aClass != null) {
        try {
            return aClass.getDeclaredMethod(methodName, parameters)
        } catch (NotFoundException ignored) {
        }
        aClass = aClass.superclass
    }
    return null
}


void addInitEvent(ClassPool classPool, CtClass aClass, boolean override, String methodName, CtClass returnType, CtClass[] parameters) {
    CtMethod method
    println("class name:")
    println(aClass.name)

    try {
        method = aClass.getDeclaredMethod(methodName, parameters)
        println("method found")
        method.insertBefore("com.noveogroup.screen_shot_report.Facade.setupUncaughtExceptionHandler(this);")

    } catch (NotFoundException ignored) {
        println("method not found " + methodName)
        method = findMethod(aClass, methodName, parameters)
        if (method != null && (method.modifiers.and(Modifier.FINAL) != 0)) return

        StringBuilder builder = new StringBuilder()

        builder.append("public $returnType.name $methodName(")
        parameters.size().times { int i ->
            if (i > 0) builder.append(",")
            builder.append("${parameters[i].name} arg$i")
        }

        builder.append(") { ")
        builder.append("com.noveogroup.screen_shot_report.Facade.setupUncaughtExceptionHandler(this); super.onCreate(arg0);")
        builder.append(" }")

        println(builder.toString());
        method = CtNewMethod.make(builder.toString(), aClass)
        aClass.addMethod(method)
    }
}

void addScreenShotEvent(ClassPool classPool, CtClass aClass, boolean override, String methodName, CtClass returnType, CtClass[] parameters) {
    CtMethod method
    println("class name:")
    println(aClass.name)

    try {
        method = aClass.getDeclaredMethod(methodName, parameters)
        println("method found")
        String keyCodeVarname = method.getMethodInfo().getConstPool().getUtf8Info(0);
        String eventVarNAme = method.getMethodInfo().getConstPool().getUtf8Info(1);
        method.insertBefore("if (com.noveogroup.screen_shot_report.Facade.onKeyDown(" + keyCodeVarname + ", " +  eventVarNAme + ", this)) return true;")

    } catch (NotFoundException ignored) {
        println("method not found")
        method = findMethod(aClass, methodName, parameters)
        if (method != null && (method.modifiers.and(Modifier.FINAL) != 0)) return

        StringBuilder builder = new StringBuilder()

        builder.append("public $returnType.name $methodName(")
        parameters.size().times { int i ->
            if (i > 0) builder.append(",")
            builder.append("${parameters[i].name} arg$i")
        }

        builder.append(") { ")
        builder.append("if (com.noveogroup.screen_shot_report.Facade.onKeyDown(arg0, arg1, this)) {return true;} else return super.onKeyDown(arg0,arg1);")
        builder.append(" }")

        println(builder.toString());
        method = CtNewMethod.make(builder.toString(), aClass)
        aClass.addMethod(method)
    }
}

void instrumentActivity(ClassPool classPool, CtClass activityClass) {
    CtClass keyClass = classPool.getCtClass("android.view.KeyEvent")
    CtClass intClass = classPool.getCtClass("int")
    CtClass booleanClass = classPool.getCtClass("boolean")
    CtClass bundleClass = classPool.getCtClass("android.os.Bundle")
    CtClass voidClass = classPool.getCtClass("void")

    addScreenShotEvent(classPool, activityClass, true, "onKeyDown", booleanClass, [intClass, keyClass] as CtClass[])
    addInitEvent(classPool, activityClass, true, "onCreate", voidClass, [bundleClass] as CtClass[])
}

rootProject.afterEvaluate {
    rootProject.allprojects.each { project ->
        println("Instrumenting1 " + project.name);
        project.tasks.each { task->
            if (task instanceof JavaCompile) {
                JavaCompile javaCompile = task
                println("Instrumenting2 " + project.name);
                javaCompile.doLast {
                    logger.lifecycle ":$javaCompile.project.name:instrumentLogger[${javaCompile.name}]"

                    ClassPool classPool = new ClassPool()
                    classPool.appendClassPath(javaCompile.options.bootClasspath)
                    println(javaCompile.options.bootClasspath)

                    javaCompile.classpath.each {
                        classPool.appendClassPath(it.absolutePath)
                    }
                    classPool.appendClassPath(javaCompile.destinationDir.absolutePath)

                    eachClass(javaCompile.destinationDir) { String className ->
                        logger.info "instrument $className"
                        CtClass aClass = classPool.getCtClass(className)
                        if (findSuperclass(aClass, classPool.getCtClass("android.app.Activity"))) {
                            println("class ")
                            instrumentActivity(classPool, aClass)
                            aClass.writeFile(javaCompile.destinationDir.absolutePath)
                            aClass.detach()
                        }

                    }
                }
            }
        }
    }
}
